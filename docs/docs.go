// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "produces": [
                    "text/html"
                ],
                "summary": "Index",
                "responses": {}
            }
        },
        "/admin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "text/html"
                ],
                "summary": "Admin Index",
                "responses": {}
            }
        },
        "/admin/config": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Server Config",
                "responses": {}
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Change Server Config",
                "parameters": [
                    {
                        "description": "config",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/derperer.DerpererConfig"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/derp.json": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get DERP Map",
                "parameters": [
                    {
                        "enum": [
                            "alive",
                            "error",
                            "all"
                        ],
                        "type": "string",
                        "description": "alive|error|all",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "latency limit, e.g. 500ms",
                        "name": "latency-limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "bandwidth limit, e.g. 2Mbps",
                        "name": "bandwidth-limit",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "derperer.DERPMapPolicy": {
            "type": "object",
            "properties": {
                "baselineBandwidth": {
                    "type": "number"
                },
                "checkDuration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "recheckInterval": {
                    "description": "RecheckInterval is the interval to recheck a abandoned node.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "testConcurrency": {
                    "type": "integer"
                }
            }
        },
        "derperer.DerpererConfig": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "adminToken": {
                    "type": "string"
                },
                "derpmapPolicy": {
                    "$ref": "#/definitions/derperer.DERPMapPolicy"
                },
                "fetchBatch": {
                    "type": "integer"
                },
                "fetchInterval": {
                    "$ref": "#/definitions/time.Duration"
                },
                "fofaClient": {
                    "$ref": "#/definitions/fofa.Fofa"
                }
            }
        },
        "fofa.Fofa": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
